-- Create oms_company_address table
CREATE TABLE oms_company_address (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(100),
  address VARCHAR(100),
  city VARCHAR(100),
  phone VARCHAR(100)
);

-- Insert some random data into oms_company_address table
INSERT INTO oms_company_address (name, address, city, phone)
VALUES
  ('Company A', '123 Main St', 'City A', '111-1111-1111'),
  ('Company B', '456 Elm St', 'City B', '222-2222-2222'),
  ('Company C', '789 Oak St', 'City C', '333-3333-3333');

-- Fetch all data from oms_company_address table
SELECT * FROM oms_company_address;

-- Fetch top 3 records from oms_company_address table
SELECT * FROM oms_company_address LIMIT 3;

-- Update oms_company_address table to set all phone to 666-6666-8888
UPDATE oms_company_address SET phone = '666-6666-8888';

-- Delete one entry from oms_company_address table
DELETE FROM oms_company_address WHERE id = 1;



Design of APIs for a Blog Website:
a) Find the customer's payments:

GET /customers/{customerId}/payments
b) Find the customer's history orders from a specific date range:

GET /customers/{customerId}/orders?start_date=2022-10-10&end_date=2022-10-24
c) Find the customer's delivery addresses:

GET /customers/{customerId}/delivery-addresses
d) Get the customer's default payment:

GET /customers/{customerId}/default-payment
e) Get the customer's default delivery address:

GET /customers/{customerId}/default-delivery-address
In the above API design, the {customerId} is a path variable representing the unique identifier of the customer. The API paths are named using plural nouns to indicate collections (e.g., /customers, /payments, /orders, etc.), and individual resources are identified using their unique identifiers (e.g., {customerId}).










// Create a test database
use testDB

// Create oms_company_address collection
db.createCollection('oms_company_address')

// Insert a few random entries
db.oms_company_address.insertMany([
  { name: 'Company A', address: '123 Main St', city: 'City A' },
  { name: 'Company B', address: '456 Elm St', city: 'City B' },
  { name: 'Company C', address: '789 Oak St', city: 'City C' }
])

// Read one entry
db.oms_company_address.findOne()

// Read all entries
db.oms_company_address.find()

// Update one entry
db.oms_company_address.updateOne({ name: 'Company A' }, { $set: { city: 'New City' } })

// Remove one entry
db.oms_company_address.deleteOne({ name: 'Company B' })
